syntax = "proto3";

package kratos;

enum ErrorCode {
    ERROR_NONE = 0;
    ERROR_RESET_FAILED = 1;
    ERROR_ADD_RULE_FAILED = 2;
    ERROR_DELETE_RULE_FAILED = 3;
    ERROR_ADD_SERVICE_FAILED = 4;
    ERROR_DELETE_SERVICE_FAILED = 5;
}

message CounterInfo {
    string host = 1;
    int32 port = 2;
    int64 inbound_traffic = 3;
    int64 outbound_traffic = 4;
}

message StatusRequest {
}

message AddRuleRequest {
    int32 port = 1;
    int64 traffic_qouta = 2;
}

message DeleteRuleRequest {
    int32 port = 1;
}

message ResetCounterRequest {
}

message AddServiceRequest {
    int32 port = 1;
    int64 traffic_qouta = 2;
    string config = 3;
}

message DeleteServiceRequest {
    int32 port = 1;
}

message StatusResponse {
    int32 error_code = 1;
    string error_msg = 2;
    repeated CounterInfo couter_info = 3;
}

message AddRuleResponse {
    int32 error_code = 1;
    string error_msg = 2;
}

message DeleteRuleResponse {
    int32 error_code = 1;
    string error_msg = 2;
}

message ResetCounterResponse {
    int32 error_code = 1;
    string error_msg = 2;
}

message AddServiceResponse {
    int32 error_code = 1;
    string error_msg = 2;
}

message DeleteServiceResponse {
    int32 error_code = 1;
    string error_msg = 2;
}

service KratosService {
    rpc Status(StatusRequest) returns (StatusResponse) {
    }

    rpc AddRule(AddRuleRequest) returns (AddRuleResponse) {
    }

    rpc DeleteRule(DeleteRuleRequest) returns (DeleteRuleResponse) {
    }

    rpc ResetCounter(ResetCounterRequest) returns (ResetCounterResponse) {
    }

    rpc AddService(AddServiceRequest) returns (AddServiceResponse) {
    }

    rpc DeleteService(DeleteServiceRequest) returns (DeleteServiceResponse) {
    }
}
